# Generated by Django 2.1.7 on 2019-02-20 00:22

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BaseObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Designates when this thing was created.')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Designates when this thing was last modified.')),
            ],
        ),
        migrations.CreateModel(
            name='RobotTestRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(choices=[('pass', 'PASS'), ('fail', 'FAIL'), ('error', 'ERROR')], help_text='The final result of the test execution.', max_length=5)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now, help_text='When test execution started.')),
                ('end_time', models.DateTimeField(help_text='When test execution ended.')),
                ('execution_time', models.TimeField()),
                ('status', models.CharField(choices=[('not started', 'Not Started'), ('in progress', 'In Progress'), ('complete', 'Complete'), ('error', 'Error')], help_text='The current status of this test run.', max_length=20)),
                ('reason', models.TextField(blank=True, help_text='Why the test run has the current status.', max_length=400)),
            ],
        ),
        migrations.CreateModel(
            name='RobotApplicationUnderTest',
            fields=[
                ('baseobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='testrunner.BaseObject')),
                ('app_test_location', models.FilePathField(allow_files=False, allow_folders=True, help_text='The local path to the directory that contains tests for this app.', max_length=200, path=None, recursive=True)),
                ('description', models.TextField(max_length=4000, null=True)),
                ('robot_location', models.FilePathField(help_text='The local path to the robot executable to use when running the tests for this application.', match='*robot.exe', max_length=200, path=None, recursive=True)),
            ],
            bases=('testrunner.baseobject',),
        ),
        migrations.CreateModel(
            name='RobotTag',
            fields=[
                ('baseobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='testrunner.BaseObject')),
                ('description', models.TextField(max_length=4000, null=True)),
            ],
            bases=('testrunner.baseobject',),
        ),
        migrations.CreateModel(
            name='RobotTest',
            fields=[
                ('baseobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='testrunner.BaseObject')),
                ('documentation', models.TextField(max_length=4000, null=True)),
            ],
            bases=('testrunner.baseobject',),
        ),
        migrations.CreateModel(
            name='RobotTestStep',
            fields=[
                ('baseobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='testrunner.BaseObject')),
                ('keyword', models.CharField(max_length=200)),
                ('order', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='execution order')),
                ('arguments', models.TextField(help_text='A pipe separated string of arguments passed to the test step keyword.', max_length=4000, null=True)),
                ('robot_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='testrunner.RobotTest')),
            ],
            bases=('testrunner.baseobject',),
        ),
        migrations.CreateModel(
            name='RobotTestSuite',
            fields=[
                ('baseobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='testrunner.BaseObject')),
                ('documentation', models.TextField(max_length=4000, null=True)),
                ('suite_location', models.FilePathField(allow_folders=True, help_text='The local path to the directory or file that contains tests for this suite.', max_length=200, null=True, path='<property object at 0x0000000003DB75E8>', recursive=True)),
                ('application', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='app_suite', related_query_name='parent_application', to='testrunner.RobotApplicationUnderTest')),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_suite', related_query_name='parent_suite', to='testrunner.RobotTestSuite')),
                ('robot_tags', models.ManyToManyField(to='testrunner.RobotTag')),
            ],
            bases=('testrunner.baseobject',),
        ),
        migrations.CreateModel(
            name='RobotVariable',
            fields=[
                ('baseobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='testrunner.BaseObject')),
                ('description', models.TextField(max_length=4000, null=True)),
            ],
            bases=('testrunner.baseobject',),
        ),
        migrations.AddField(
            model_name='robottestrun',
            name='robot_test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='testrunner.RobotTest'),
        ),
        migrations.AddField(
            model_name='robottest',
            name='robot_suite',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test', related_query_name='suite', to='testrunner.RobotTestSuite'),
        ),
        migrations.AddField(
            model_name='robottest',
            name='robot_tags',
            field=models.ManyToManyField(to='testrunner.RobotTag'),
        ),
    ]
